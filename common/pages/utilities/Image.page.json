{
  "tables": [
    {
      "kind": "interface",
      "name": "IImage",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": []
    },
    {
      "kind": "interface",
      "name": "IImageProps",
      "extendsTokens": [
        {
          "text": "React"
        },
        {
          "text": "."
        },
        {
          "text": "ImgHTMLAttributes"
        },
        {
          "text": "<"
        },
        {
          "text": "HTMLImageElement"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Additional css class to apply to the Component\n\n",
          "deprecated": false
        },
        {
          "name": "componentRef",
          "typeTokens": [
            {
              "text": "IRefObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IImage",
              "hyperlinkedPage": "Image",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Optional callback to access the ICheckbox interface. Use this instead of ref for accessing the public methods and properties of the component.\n",
          "deprecated": false
        },
        {
          "name": "coverStyle",
          "typeTokens": [
            {
              "text": "ImageCoverStyle",
              "hyperlinkedPage": "Image",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Specifies the cover style to be used for this image. If not specified, this will be dynamically calculated based on the aspect ratio for the image.\n",
          "deprecated": false
        },
        {
          "name": "errorSrc",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Deprecated at v1.3.6, to replace the src in case of errors, use `onLoadingStateChange` instead and rerender the Image with a difference src.\n\n",
          "deprecated": true
        },
        {
          "name": "imageFit",
          "typeTokens": [
            {
              "text": "ImageFit",
              "hyperlinkedPage": "Image",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Used to determine how the image is scaled and cropped to fit the frame.\n\n",
          "deprecated": false
        },
        {
          "name": "maximizeFrame",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true, the image frame will expand to fill its parent container.\n",
          "deprecated": false
        },
        {
          "name": "onLoadingStateChange",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "loadState"
            },
            {
              "text": ": "
            },
            {
              "text": "ImageLoadState",
              "hyperlinkedPage": "Image",
              "pageKind": "Components"
            },
            {
              "text": ") => void"
            }
          ],
          "descriptionHtml": "Optional callback method for when the image load state has changed. The 'loadState' parameter indicates the current state of the Image.\n",
          "deprecated": false
        },
        {
          "name": "shouldFadeIn",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true, fades the image in when loaded.\n\n",
          "deprecated": false
        },
        {
          "name": "shouldStartVisible",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until it is successfully loaded. This disables shouldFadeIn.\n\n",
          "deprecated": false
        },
        {
          "name": "styles",
          "typeTokens": [
            {
              "text": "IStyleFunctionOrObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IImageStyleProps",
              "hyperlinkedPage": "Image",
              "pageKind": "Components"
            },
            {
              "text": ", "
            },
            {
              "text": "IImageStyles",
              "hyperlinkedPage": "Image",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Call to provide customized styling that will layer on top of the variant rules\n",
          "deprecated": false
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme",
              "hyperlinkedPage": "ITheme",
              "pageKind": "References"
            }
          ],
          "descriptionHtml": "Theme provided by HOC.\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IImageStyleProps",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Accept custom classNames\n",
          "deprecated": false
        },
        {
          "name": "height",
          "typeTokens": [
            {
              "text": "number | string"
            }
          ],
          "descriptionHtml": "Image height value\n",
          "deprecated": false
        },
        {
          "name": "isCenter",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "ImageFit booleans for center, cover, contain, centerCover, none\n",
          "deprecated": false
        },
        {
          "name": "isCenterCover",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "",
          "deprecated": false
        },
        {
          "name": "isContain",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "",
          "deprecated": false
        },
        {
          "name": "isCover",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "",
          "deprecated": false
        },
        {
          "name": "isError",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "if true image load is in error\n",
          "deprecated": false
        },
        {
          "name": "isLandscape",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true the image is coverStyle landscape instead of portrait\n",
          "deprecated": false
        },
        {
          "name": "isLoaded",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true, the image is loaded\n",
          "deprecated": false
        },
        {
          "name": "isNone",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "",
          "deprecated": false
        },
        {
          "name": "isNotImageFit",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "if true, imageFit is undefined\n",
          "deprecated": false
        },
        {
          "name": "maximizeFrame",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true, the image frame will expand to fill its parent container.\n",
          "deprecated": false
        },
        {
          "name": "shouldFadeIn",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true, fades the image in when loaded.\n\n",
          "deprecated": false
        },
        {
          "name": "shouldStartVisible",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until it is successfully loaded. This disables shouldFadeIn.\n\n",
          "deprecated": false
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme",
              "hyperlinkedPage": "ITheme",
              "pageKind": "References"
            }
          ],
          "descriptionHtml": "Accept theme prop.\n",
          "deprecated": false
        },
        {
          "name": "width",
          "typeTokens": [
            {
              "text": "number | string"
            }
          ],
          "descriptionHtml": "Image width value\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IImageStyles",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "image",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style set for the img element.\n",
          "deprecated": false
        },
        {
          "name": "root",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style set for the root div element.\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "enum",
      "name": "ImageCoverStyle",
      "extendsTokens": [],
      "descriptionHtml": "The cover style to be used on the image \n",
      "members": [
        {
          "name": "landscape",
          "descriptionHtml": "The image will be shown at 100% height of container and the width will be scaled accordingly\n",
          "value": "0"
        },
        {
          "name": "portrait",
          "descriptionHtml": "The image will be shown at 100% width of container and the height will be scaled accordingly\n",
          "value": "1"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "ImageFit",
      "extendsTokens": [],
      "descriptionHtml": "The possible methods that can be used to fit the image. \n",
      "members": [
        {
          "name": "center",
          "descriptionHtml": "The image is not scaled. The image is centered and cropped within the content box.\n",
          "value": "0"
        },
        {
          "name": "centerCover",
          "descriptionHtml": "The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will behave as ImageFit.center if the image's natural height or width is less than the Image frame's height or width, but if both natural height and width are larger than the frame it will behave as ImageFit.cover.\n",
          "value": "4"
        },
        {
          "name": "contain",
          "descriptionHtml": "The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of the frame will be empty depending on the difference in aspect ratio between the image and the frame.\n",
          "value": "1"
        },
        {
          "name": "cover",
          "descriptionHtml": "The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped from the top and bottom, or from the sides, depending on the difference in aspect ratio between the image and the frame.\n",
          "value": "2"
        },
        {
          "name": "none",
          "descriptionHtml": "Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the frame will have empty space.\n",
          "value": "3"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "ImageLoadState",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "error",
          "descriptionHtml": "An error has been encountered while loading the image.\n",
          "value": "2"
        },
        {
          "name": "errorLoaded",
          "descriptionHtml": "Deprecated at v1.3.6, to replace the src in case of errors, use `onLoadingStateChange` instead and rerender the Image with a difference src.\n\n",
          "value": "3"
        },
        {
          "name": "loaded",
          "descriptionHtml": "The image has been loaded successfully.\n",
          "value": "1"
        },
        {
          "name": "notLoaded",
          "descriptionHtml": "The image has not yet been loaded, and there is no error yet.\n",
          "value": "0"
        }
      ]
    }
  ]
}
