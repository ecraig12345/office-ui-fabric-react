{
  "tables": [
    {
      "kind": "enum",
      "name": "FocusZoneDirection",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "bidirectional",
          "descriptionHtml": "React to all arrows.\n",
          "value": "2"
        },
        {
          "name": "horizontal",
          "descriptionHtml": "Only react to left/right arrows.\n",
          "value": "1"
        },
        {
          "name": "vertical",
          "descriptionHtml": "Only react to up/down arrows.\n",
          "value": "0"
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IFocusZone",
      "extendsTokens": [],
      "descriptionHtml": "FocusZone component class interface. \n",
      "members": [
        {
          "name": "focus",
          "typeTokens": [
            {
              "text": "focus"
            },
            {
              "text": "("
            },
            {
              "text": "forceIntoFirstElement"
            },
            {
              "text": "?: "
            },
            {
              "text": "boolean"
            },
            {
              "text": "): "
            },
            {
              "text": "boolean"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "Sets focus to the first tabbable item in the zone.\n\n",
          "deprecated": false
        },
        {
          "name": "focusElement",
          "typeTokens": [
            {
              "text": "focusElement"
            },
            {
              "text": "("
            },
            {
              "text": "childElement"
            },
            {
              "text": "?: "
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": "): "
            },
            {
              "text": "boolean"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "Sets focus to a specific child element within the zone. This can be used in conjunction with onBeforeFocus to created delayed focus scenarios (like animate the scroll position to the correct location and then focus.)\n\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IFocusZoneProps",
      "extendsTokens": [
        {
          "text": "React"
        },
        {
          "text": "."
        },
        {
          "text": "HTMLAttributes"
        },
        {
          "text": "<"
        },
        {
          "text": "HTMLElement"
        },
        {
          "text": " | "
        },
        {
          "text": "FocusZone"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "FocusZone component props. \n",
      "members": [
        {
          "name": "allowFocusRoot",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Allow focus to move to root\n",
          "deprecated": false
        },
        {
          "name": "allowTabKey",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Allows tab key to be handled to tab through a list of items in the focus zone, an unfortunate side effect is that users will not be able to tab out of the focus zone and have to hit escape or some other key.\n\n",
          "deprecated": true
        },
        {
          "name": "ariaDescribedBy",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Sets the aria-describedby attribute.\n",
          "deprecated": false
        },
        {
          "name": "ariaLabelledBy",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Sets the aria-labelledby attribute.\n",
          "deprecated": false
        },
        {
          "name": "as",
          "typeTokens": [
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "ReactType"
            }
          ],
          "descriptionHtml": "A component that should be used as the root element of the FocusZone component.\n",
          "deprecated": false
        },
        {
          "name": "checkForNoWrap",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether the to check for data-no-horizontal-wrap or data-no-vertical-wrap attributes when determining how to move focus\n\n",
          "deprecated": false
        },
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Additional class name to provide on the root element, in addition to the ms-FocusZone class.\n",
          "deprecated": false
        },
        {
          "name": "componentRef",
          "typeTokens": [
            {
              "text": "IRefObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IFocusZone",
              "hyperlinkedPage": "FocusZone",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Optional callback to access the IFocusZone interface. Use this instead of ref for accessing the public methods and properties of the component.\n",
          "deprecated": false
        },
        {
          "name": "defaultActiveElement",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Optionally provide a selector for identifying the intial active element.\n",
          "deprecated": false
        },
        {
          "name": "direction",
          "typeTokens": [
            {
              "text": "FocusZoneDirection",
              "hyperlinkedPage": "FocusZone",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Defines which arrows to react to.\n\n",
          "deprecated": false
        },
        {
          "name": "disabled",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If set, the FocusZone will not be tabbable and keyboard navigation will be disabled. This does not affect disabled attribute of any child.\n",
          "deprecated": false
        },
        {
          "name": "doNotAllowFocusEventToPropagate",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether the FocusZone should allow focus events to propagate past the FocusZone\n",
          "deprecated": false
        },
        {
          "name": "elementType",
          "typeTokens": [
            {
              "text": "keyof "
            },
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "ReactHTML"
            }
          ],
          "descriptionHtml": "Element type the root element will use. Default is \"div\".\n\n",
          "deprecated": true
        },
        {
          "name": "handleTabKey",
          "typeTokens": [
            {
              "text": "FocusZoneTabbableElements"
            }
          ],
          "descriptionHtml": "Allows tab key to be handled to tab through a list of items in the focus zone, an unfortunate side effect is that users will not be able to tab out of the focus zone and have to hit escape or some other key.\n",
          "deprecated": false
        },
        {
          "name": "isCircularNavigation",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If set, will cycle to the beginning of the targets once the user navigates to the next target while at the end, and to the end when navigate to the previous at the beginning.\n",
          "deprecated": false
        },
        {
          "name": "isInnerZoneKeystroke",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "ev"
            },
            {
              "text": ": "
            },
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "KeyboardEvent"
            },
            {
              "text": "<"
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": ">) => boolean"
            }
          ],
          "descriptionHtml": "If provided, this callback will be executed on keypresses to determine if the user intends to navigate into the inner zone. Returning true will ask the first inner zone to set focus.\n",
          "deprecated": false
        },
        {
          "name": "onActiveElementChanged",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "element"
            },
            {
              "text": "?: "
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": ", "
            },
            {
              "text": "ev"
            },
            {
              "text": "?: "
            },
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "FocusEvent"
            },
            {
              "text": "<"
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": ">) => void"
            }
          ],
          "descriptionHtml": "Callback for when one of immediate children elements gets active by getting focused or by having one of its respective children elements focused.\n",
          "deprecated": false
        },
        {
          "name": "onBeforeFocus",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "childElement"
            },
            {
              "text": "?: "
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": ") => boolean"
            }
          ],
          "descriptionHtml": "Callback method for determining if focus should indeed be set on the given element.\n\n",
          "deprecated": false
        },
        {
          "name": "onFocusNotification",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Callback to notify creators that focus has been set on the FocusZone\n",
          "deprecated": false
        },
        {
          "name": "rootProps",
          "typeTokens": [
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "HTMLAttributes"
            },
            {
              "text": "<"
            },
            {
              "text": "HTMLDivElement"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Deprecated at v1.12.1. DIV props provided to the FocusZone will be mixed into the root element.\n\n",
          "deprecated": true
        },
        {
          "name": "shouldInputLoseFocusOnArrowKey",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "inputElement"
            },
            {
              "text": ": "
            },
            {
              "text": "HTMLInputElement"
            },
            {
              "text": ") => boolean"
            }
          ],
          "descriptionHtml": "A callback method to determine if the input element should lose focus on arrow keys\n\n",
          "deprecated": false
        }
      ]
    }
  ]
}
