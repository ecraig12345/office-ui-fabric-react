{
  "tables": [
    {
      "kind": "interface",
      "name": "IComboBox",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "focus",
          "typeTokens": [
            {
              "text": "focus"
            },
            {
              "text": "("
            },
            {
              "text": "shouldOpenOnFocus"
            },
            {
              "text": "?: "
            },
            {
              "text": "boolean"
            },
            {
              "text": ", "
            },
            {
              "text": "useFocusAsync"
            },
            {
              "text": "?: "
            },
            {
              "text": "boolean"
            },
            {
              "text": "): "
            },
            {
              "text": "boolean"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "Sets focus to the input in the comboBox\n\n",
          "deprecated": false
        },
        {
          "name": "dismissMenu",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "If there is a menu open this will dismiss the menu\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IComboBoxOption",
      "extendsTokens": [
        {
          "text": "ISelectableOption"
        },
        {
          "text": " "
        }
      ],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "styles",
          "typeTokens": [
            {
              "text": "Partial"
            },
            {
              "text": "<"
            },
            {
              "text": "IComboBoxOptionStyles",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Specific styles for each comboBox option. If you intend to give common styles to all comboBox option please use the prop comboBoxOptionStyles\n",
          "deprecated": false
        },
        {
          "name": "useAriaLabelAsText",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "In scenarios where embedded data is used at the text prop, we will use the ariaLabel prop to set the aria-label and preview text. Default to false\n\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IComboBoxOptionStyles",
      "extendsTokens": [
        {
          "text": "IButtonStyles",
          "hyperlinkedPage": "Button",
          "pageKind": "Components"
        },
        {
          "text": " "
        }
      ],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "optionText",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for the text inside the comboBox option. This should be used instead of the description inside IButtonStyles because we custom render the text in the comboBox options.\n",
          "deprecated": false
        },
        {
          "name": "optionTextWrapper",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for the comboBox option text's wrapper.\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IComboBoxProps",
      "extendsTokens": [
        {
          "text": "ISelectableDroppableTextProps"
        },
        {
          "text": "<"
        },
        {
          "text": "IComboBox",
          "hyperlinkedPage": "ComboBox",
          "pageKind": "Components"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "allowFreeform",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether the ComboBox is free form, meaning that the user input is not bound to provided options. Defaults to false.\n",
          "deprecated": false
        },
        {
          "name": "ariaDescribedBy",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Optional prop to add a string id that can be referenced inside the aria-describedby attribute\n",
          "deprecated": false
        },
        {
          "name": "autoComplete",
          "typeTokens": [
            {
              "text": "'on' | 'off'"
            }
          ],
          "descriptionHtml": "Whether the ComboBox auto completes. As the user is inputing text, it will be suggested potential matches from the list of options. If the combo box is expanded, this will also scroll to the suggested option, and give it a selected style.\n\n",
          "deprecated": false
        },
        {
          "name": "autofill",
          "typeTokens": [
            {
              "text": "IAutofillProps",
              "hyperlinkedPage": "Autofill",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "The AutofillProps to be passed into the Autofill component inside combobox\n",
          "deprecated": false
        },
        {
          "name": "buttonIconProps",
          "typeTokens": [
            {
              "text": "IIconProps",
              "hyperlinkedPage": "Icon",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "The IconProps to use for the button aspect of the combobox\n",
          "deprecated": false
        },
        {
          "name": "caretDownButtonStyles",
          "typeTokens": [
            {
              "text": "Partial"
            },
            {
              "text": "<"
            },
            {
              "text": "IButtonStyles",
              "hyperlinkedPage": "Button",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Styles for the caret down button.\n",
          "deprecated": false
        },
        {
          "name": "comboBoxOptionStyles",
          "typeTokens": [
            {
              "text": "Partial"
            },
            {
              "text": "<"
            },
            {
              "text": "IComboBoxOptionStyles",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Default styles that should be applied to ComboBox options, in case an option does not come with user-defined custom styles\n",
          "deprecated": false
        },
        {
          "name": "componentRef",
          "typeTokens": [
            {
              "text": "IRefObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IComboBox",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Optional callback to access the IComboBox interface. Use this instead of ref for accessing the public methods and properties of the component.\n",
          "deprecated": false
        },
        {
          "name": "dropdownMaxWidth",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Custom max width for dropdown\n",
          "deprecated": false
        },
        {
          "name": "dropdownWidth",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Custom width for dropdown (unless useComboBoxAsMenuWidth is undefined or false)\n",
          "deprecated": false
        },
        {
          "name": "getClassNames",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "theme"
            },
            {
              "text": ": "
            },
            {
              "text": "ITheme"
            },
            {
              "text": ", "
            },
            {
              "text": "isOpen"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "disabled"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "required"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "focused"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "allowFreeForm"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "hasErrorMessage"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "className"
            },
            {
              "text": "?: string) => "
            },
            {
              "text": "IComboBoxClassNames"
            }
          ],
          "descriptionHtml": "Custom function for providing the classNames for the ComboBox. Can be used to provide all styles for the component instead of applying them on top of the default styles.\n",
          "deprecated": false
        },
        {
          "name": "isButtonAriaHidden",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Sets the 'aria-hidden' attribute on the ComboBox's button element instructing screen readers how to handle the element. This element is hidden by default because all functionality is handled by the input element and the arrow button is only meant to be decorative.\n\n",
          "deprecated": false
        },
        {
          "name": "keytipProps",
          "typeTokens": [
            {
              "text": "IKeytipProps",
              "hyperlinkedPage": "Keytip",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Optional keytip for this combo box\n",
          "deprecated": false
        },
        {
          "name": "multiSelect",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Optional mode indicates if multi-choice selections is allowed. Default to false\n",
          "deprecated": false
        },
        {
          "name": "onChange",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "event"
            },
            {
              "text": ": "
            },
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "FormEvent"
            },
            {
              "text": "<"
            },
            {
              "text": "IComboBox",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": ">, "
            },
            {
              "text": "option"
            },
            {
              "text": "?: "
            },
            {
              "text": "IComboBoxOption",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": ", "
            },
            {
              "text": "index"
            },
            {
              "text": "?: number, "
            },
            {
              "text": "value"
            },
            {
              "text": "?: string) => void"
            }
          ],
          "descriptionHtml": "Callback issued when either: 1) the selected option changes 2) a manually edited value is submitted. In this case there may not be a matched option if allowFreeform is also true (and hence only value would be true, the other parameter would be null in this case)\n",
          "deprecated": false
        },
        {
          "name": "onChanged",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "option"
            },
            {
              "text": "?: "
            },
            {
              "text": "IComboBoxOption",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": ", "
            },
            {
              "text": "index"
            },
            {
              "text": "?: number, "
            },
            {
              "text": "value"
            },
            {
              "text": "?: string, "
            },
            {
              "text": "submitPendingValueEvent"
            },
            {
              "text": "?: any) => void"
            }
          ],
          "descriptionHtml": "Deprecated, use `onChange` instead.\n\n",
          "deprecated": true
        },
        {
          "name": "onItemClick",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "event"
            },
            {
              "text": ": "
            },
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "FormEvent"
            },
            {
              "text": "<"
            },
            {
              "text": "IComboBox",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": ">, "
            },
            {
              "text": "option"
            },
            {
              "text": "?: "
            },
            {
              "text": "IComboBoxOption",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": ", "
            },
            {
              "text": "index"
            },
            {
              "text": "?: number) => void"
            }
          ],
          "descriptionHtml": "Callback issued when a ComboBox item is clicked.\n",
          "deprecated": false
        },
        {
          "name": "onMenuDismissed",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Function that gets invoked when the ComboBox menu is dismissed\n",
          "deprecated": false
        },
        {
          "name": "onMenuOpen",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Function that gets invoked when the ComboBox menu is launched\n",
          "deprecated": false
        },
        {
          "name": "onPendingValueChanged",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "option"
            },
            {
              "text": "?: "
            },
            {
              "text": "IComboBoxOption",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": ", "
            },
            {
              "text": "index"
            },
            {
              "text": "?: number, "
            },
            {
              "text": "value"
            },
            {
              "text": "?: string) => void"
            }
          ],
          "descriptionHtml": "Callback issued when the user changes the pending value in ComboBox\n",
          "deprecated": false
        },
        {
          "name": "onRenderLowerContent",
          "typeTokens": [
            {
              "text": "IRenderFunction"
            },
            {
              "text": "<"
            },
            {
              "text": "IComboBoxProps",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Add additional content below the callout list.\n",
          "deprecated": false
        },
        {
          "name": "onResolveOptions",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "options"
            },
            {
              "text": ": "
            },
            {
              "text": "IComboBoxOption",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": "[]) => "
            },
            {
              "text": "IComboBoxOption",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": "[] | "
            },
            {
              "text": "PromiseLike"
            },
            {
              "text": "<"
            },
            {
              "text": "IComboBoxOption",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": "[]>"
            }
          ],
          "descriptionHtml": "Callback issued when the options should be resolved, if they have been updated or if they need to be passed in the first time\n",
          "deprecated": false
        },
        {
          "name": "onScrollToItem",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "itemIndex"
            },
            {
              "text": ": number) => void"
            }
          ],
          "descriptionHtml": "Callback issued when the ComboBox requests the list to scroll to a specific element\n",
          "deprecated": false
        },
        {
          "name": "options",
          "typeTokens": [
            {
              "text": "IComboBoxOption",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": "[]"
            }
          ],
          "descriptionHtml": "Collection of options for this ComboBox\n",
          "deprecated": false
        },
        {
          "name": "persistMenu",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Menu will not be created or destroyed when opened or closed, instead it will be hidden. This will improve perf of the menu opening but could potentially impact overall perf by having more elemnts in the dom. Should only be used when perf is important. Note: This may increase the amount of time it takes for the comboBox itself to mount.\n",
          "deprecated": false
        },
        {
          "name": "scrollSelectedToTop",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "When options are scrollable the selected option is positioned at the top of the callout when it is opened (unless it has reached the end of the scrollbar).\n\n",
          "deprecated": false
        },
        {
          "name": "styles",
          "typeTokens": [
            {
              "text": "Partial"
            },
            {
              "text": "<"
            },
            {
              "text": "IComboBoxStyles",
              "hyperlinkedPage": "ComboBox",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Custom styles for this component\n",
          "deprecated": false
        },
        {
          "name": "text",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Value to show in the input, does not have to map to a combobox option\n",
          "deprecated": false
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme"
            }
          ],
          "descriptionHtml": "Theme provided by HOC.\n",
          "deprecated": false
        },
        {
          "name": "useComboBoxAsMenuWidth",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether to use the ComboBoxes width as the menu's width\n",
          "deprecated": false
        },
        {
          "name": "value",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Value to show in the input, does not have to map to a combobox option Deprecated, use `text` instead.\n\n",
          "deprecated": true
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IComboBoxStyles",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "callout",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for the callout.\n",
          "deprecated": false
        },
        {
          "name": "container",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the container which has the ComboBox and the label\n",
          "deprecated": false
        },
        {
          "name": "divider",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for a divider in the options.\n",
          "deprecated": false
        },
        {
          "name": "errorMessage",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for the error Message text of the comboBox.\n",
          "deprecated": false
        },
        {
          "name": "header",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for a header in the options.\n",
          "deprecated": false
        },
        {
          "name": "input",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Base styles for the input element - which contains the currently selected option.\n",
          "deprecated": false
        },
        {
          "name": "inputDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the input element when comboBox is disabled.\n",
          "deprecated": false
        },
        {
          "name": "label",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the label element of the ComboBox.\n",
          "deprecated": false
        },
        {
          "name": "labelDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the label element of the ComboBox in the disabled state.\n",
          "deprecated": false
        },
        {
          "name": "optionsContainer",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for the container of all the Combobox options Includes the headers and dividers.\n",
          "deprecated": false
        },
        {
          "name": "optionsContainerWrapper",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for the optionsContainerWrapper.\n",
          "deprecated": false
        },
        {
          "name": "root",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Base styles for the root element of all ComboBoxes.\n",
          "deprecated": false
        },
        {
          "name": "rootDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for when the comboBox is disabled. These styles override all the other styles. NOTE : Hover (or) Focused (or) active styles are not applied for disabled comboBoxes.\n",
          "deprecated": false
        },
        {
          "name": "rootDisallowFreeForm",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for variant of ComboBox where allowFreeForm is false in the props.\n",
          "deprecated": false
        },
        {
          "name": "rootError",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for the root element for variant of ComboBox with an errorMessage in the props.\n",
          "deprecated": false
        },
        {
          "name": "rootFocused",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for when the ComboBox is focused. These styles are applied for all comboBoxes except when the comboBox is disabled.\n",
          "deprecated": false
        },
        {
          "name": "rootHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for when the ComboBox is hovered. These styles are applied for all comboBoxes except when the comboBox is disabled.\n",
          "deprecated": false
        },
        {
          "name": "rootPressed",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Styles for when the ComboBox is active. These styles are applied for all comboBoxes except when the comboBox is disabled.\n",
          "deprecated": false
        }
      ]
    }
  ]
}
