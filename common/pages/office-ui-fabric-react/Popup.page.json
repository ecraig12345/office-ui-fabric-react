{
  "tables": [
    {
      "kind": "interface",
      "name": "IPopup",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": []
    },
    {
      "kind": "interface",
      "name": "IPopupProps",
      "extendsTokens": [
        {
          "text": "React"
        },
        {
          "text": "."
        },
        {
          "text": "HTMLAttributes"
        },
        {
          "text": "<"
        },
        {
          "text": "Popup"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "ariaDescribedBy",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Defines the element id referencing the element containing the description for the popup.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "ariaLabel",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Accessible label text for the popup.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "ariaLabelledBy",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Defines the element id referencing the element containing label text for popup.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Optional class name for the root popup div.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "componentRef",
          "typeTokens": [
            {
              "text": "IRefObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IPopup",
              "hyperlinkedPage": "Popup",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Optional callback to access the IPopup interface. Use this instead of ref for accessing the public methods and properties of the component.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onDismiss",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "ev"
            },
            {
              "text": "?: "
            },
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "MouseEvent"
            },
            {
              "text": "<"
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": "> | "
            },
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "KeyboardEvent"
            },
            {
              "text": "<"
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": ">) => any"
            }
          ],
          "descriptionHtml": "A callback function for when the popup is dismissed from the close button or light dismiss. If provided, will handle escape keypresses and call this. The event will be stopped/canceled.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "role",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Aria role for popup\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "shouldRestoreFocus",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true, the unmounting of this component will cause focus to be restored to the element that had focus when first mounted.\n\n",
          "deprecated": false,
          "defaultValue": "true"
        }
      ]
    }
  ]
}
