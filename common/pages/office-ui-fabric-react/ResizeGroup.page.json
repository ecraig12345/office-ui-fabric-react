{
  "tables": [
    {
      "kind": "interface",
      "name": "IResizeGroup",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "remeasure",
          "typeTokens": [
            {
              "text": "remeasure"
            },
            {
              "text": "(): "
            },
            {
              "text": "void"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "Remeasures the available space.\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IResizeGroupProps",
      "extendsTokens": [
        {
          "text": "React"
        },
        {
          "text": "."
        },
        {
          "text": "HTMLAttributes"
        },
        {
          "text": "<"
        },
        {
          "text": "ResizeGroupBase"
        },
        {
          "text": " | "
        },
        {
          "text": "HTMLElement"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Additional css class to apply to the Component\n\n",
          "deprecated": false
        },
        {
          "name": "componentRef",
          "typeTokens": [
            {
              "text": "IRefObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IResizeGroup",
              "hyperlinkedPage": "ResizeGroup",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Optional callback to access the IResizeGroup interface. Use this instead of ref for accessing the public methods and properties of the component.\n",
          "deprecated": false
        },
        {
          "name": "data",
          "typeTokens": [
            {
              "text": "any"
            }
          ],
          "descriptionHtml": "Initial data to be passed to the onRenderData function. When there is no onGrowData provided, this data should represent what should be passed to the render function when the parent container of the ResizeGroup is at it's maximum supported width. A cacheKey property may optionally be included as part of the data. Two data objects with the same cacheKey will be assumed to take up the same width and will prevent measurements. The type of cacheKey is a string.\n",
          "deprecated": false
        },
        {
          "name": "dataDidRender",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "renderedData"
            },
            {
              "text": ": any) => void"
            }
          ],
          "descriptionHtml": "Function to be called every time data is rendered. It provides the data that was actually rendered. A use case would be adding telemetry when a particular control is shown in an overflow well or dropped as a result of onReduceData or to count the number of renders that an implementation of onReduceData triggers.\n",
          "deprecated": false
        },
        {
          "name": "onGrowData",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "prevData"
            },
            {
              "text": ": any) => any"
            }
          ],
          "descriptionHtml": "Function to be performed on the data in order to increase its width. It is called in scenarios where the container has more room than the previous render and we may be able to fit more content. If there are no more scaling operations to perform on teh data, it should return undefined to prevent an infinite render loop.\n",
          "deprecated": false
        },
        {
          "name": "onReduceData",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "prevData"
            },
            {
              "text": ": any) => any"
            }
          ],
          "descriptionHtml": "Function to be performed on the data in order to reduce its width and make it fit into the given space. If there are no more scaling steps to apply, it should return undefined to prevent an infinite render loop.\n",
          "deprecated": false
        },
        {
          "name": "onRenderData",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "data"
            },
            {
              "text": ": any) => "
            },
            {
              "text": "JSX"
            },
            {
              "text": "."
            },
            {
              "text": "Element"
            }
          ],
          "descriptionHtml": "Function to render the data. Called when rendering the contents to the screen and when rendering in a hidden div to measure the size of the contents.\n",
          "deprecated": false
        },
        {
          "name": "styles",
          "typeTokens": [
            {
              "text": "IStyleFunctionOrObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IResizeGroupStyleProps",
              "hyperlinkedPage": "ResizeGroup",
              "pageKind": "Components"
            },
            {
              "text": ", "
            },
            {
              "text": "IResizeGroupStyles",
              "hyperlinkedPage": "ResizeGroup",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Call to provide customized styling that will layer on top of the variant rules\n\n",
          "deprecated": true
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme"
            }
          ],
          "descriptionHtml": "Theme provided by HOC.\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IResizeGroupStyleProps",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Accept custom classNames\n",
          "deprecated": false
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme"
            }
          ],
          "descriptionHtml": "Accept theme prop.\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IResizeGroupStyles",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "root",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the root element.\n",
          "deprecated": false
        }
      ]
    }
  ]
}
