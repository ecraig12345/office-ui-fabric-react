{
  "tables": [
    {
      "kind": "interface",
      "name": "ITextProps",
      "extendsTokens": [
        {
          "text": "ITextSlots"
        },
        {
          "text": ", "
        },
        {
          "text": "IStyleableComponentProps"
        },
        {
          "text": "<"
        },
        {
          "text": "ITextProps"
        },
        {
          "text": ", "
        },
        {
          "text": "ITextTokens"
        },
        {
          "text": ", "
        },
        {
          "text": "ITextStyles"
        },
        {
          "text": ">"
        },
        {
          "text": ", "
        },
        {
          "text": "React"
        },
        {
          "text": "."
        },
        {
          "text": "HTMLAttributes"
        },
        {
          "text": "<"
        },
        {
          "text": "HTMLElement"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "Inputs to the component \n",
      "members": [
        {
          "name": "as",
          "typeTokens": [
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "ReactType"
            },
            {
              "text": "<"
            },
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "HTMLAttributes"
            },
            {
              "text": "<"
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": ">>"
            }
          ],
          "descriptionHtml": "Optionally render the component as another component type or primitive.\n",
          "deprecated": false
        },
        {
          "name": "block",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether the text is displayed as a block element.\n\nNote that in order for ellipsis on overflow to work properly, `block` and `nowrap` should be set to true.\n",
          "deprecated": false
        },
        {
          "name": "nowrap",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether the text is not wrapped.\n\nNote that in order for ellipsis on overflow to work properly, `block` and `nowrap` should be set to true.\n",
          "deprecated": false
        },
        {
          "name": "variant",
          "typeTokens": [
            {
              "text": "keyof "
            },
            {
              "text": "IFontStyles",
              "hyperlinkedPage": "IFontStyles",
              "pageKind": "References"
            }
          ],
          "descriptionHtml": "Optional font type for Text.\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "ITextSlots",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "root",
          "typeTokens": [
            {
              "text": "IHTMLSlot"
            }
          ],
          "descriptionHtml": "",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "ITextTokens",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": []
    }
  ]
}
