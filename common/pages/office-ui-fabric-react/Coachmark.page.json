{
  "tables": [
    {
      "kind": "interface",
      "name": "ICoachmark",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "dismiss",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "ev"
            },
            {
              "text": "?: any) => void"
            }
          ],
          "descriptionHtml": "Forces the Coachmark to dismiss\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "ICoachmarkProps",
      "extendsTokens": [
        {
          "text": "React"
        },
        {
          "text": "."
        },
        {
          "text": "ClassAttributes"
        },
        {
          "text": "<"
        },
        {
          "text": "CoachmarkBase"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "Coachmark component props \n",
      "members": [
        {
          "name": "ariaAlertText",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Text to announce to screen reader / narrator when Coachmark is displayed\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "ariaDescribedBy",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Defines the element id referencing the element containing the description for the Coachmark.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "ariaDescribedByText",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Defines the text content for the ariaDescribedBy element\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "ariaLabelledBy",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Defines the element id referencing the element containing label text for Coachmark.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "ariaLabelledByText",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Defines the text content for the ariaLabelledBy element\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "beaconColorOne",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Beacon color one.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "beaconColorTwo",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Beacon color two.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "beakHeight",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "The height of the Beak component.\n\n",
          "deprecated": true,
          "defaultValue": ""
        },
        {
          "name": "beakWidth",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "The width of the Beak component.\n\n",
          "deprecated": true,
          "defaultValue": ""
        },
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "If provided, additional class name to provide on the root element.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "collapsed",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "The starting collapsed state for the Coachmark. Use `isCollapsed` instead.\n\n",
          "deprecated": true,
          "defaultValue": "true"
        },
        {
          "name": "color",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Color of the Coachmark/TeachingBubble.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "componentRef",
          "typeTokens": [
            {
              "text": "IRefObject"
            },
            {
              "text": "<"
            },
            {
              "text": "ICoachmark",
              "hyperlinkedPage": "Coachmark",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Optional callback to access the ICoachmark interface. Use this instead of ref for accessing the public methods and properties of the component.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "delayBeforeCoachmarkAnimation",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Delay in milliseconds before Coachmark animation appears.\n\n",
          "deprecated": false,
          "defaultValue": "0"
        },
        {
          "name": "delayBeforeMouseOpen",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Delay before allowing mouse movements to open the Coachmark.\n\n",
          "deprecated": false,
          "defaultValue": "3600"
        },
        {
          "name": "height",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "The height of the Coachmark.\n\n",
          "deprecated": true,
          "defaultValue": ""
        },
        {
          "name": "isCollapsed",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "The starting collapsed state for the Coachmark.\n\n",
          "deprecated": false,
          "defaultValue": "true"
        },
        {
          "name": "isPositionForced",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether or not to force the Coachmark/TeachingBubble content to fit within the window bounds.\n\n",
          "deprecated": false,
          "defaultValue": "true"
        },
        {
          "name": "mouseProximityOffset",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "The distance in pixels the mouse is located before opening up the Coachmark.\n\n",
          "deprecated": false,
          "defaultValue": "10"
        },
        {
          "name": "onAnimationOpenEnd",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Callback when the opening animation completes.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onAnimationOpenStart",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Callback when the opening animation begins.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onDismiss",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "ev"
            },
            {
              "text": "?: any) => void"
            }
          ],
          "descriptionHtml": "Callback when the Coachmark tries to close.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onMouseMove",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "e"
            },
            {
              "text": ": "
            },
            {
              "text": "MouseEvent"
            },
            {
              "text": ") => void"
            }
          ],
          "descriptionHtml": "Callback to run when the mouse moves.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "positioningContainerProps",
          "typeTokens": [
            {
              "text": "IPositioningContainerProps",
              "hyperlinkedPage": "PositioningContainer",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Props to pass to the PositioningContainer component. Specify the `directionalHint` to indicate on which edge the Coachmark/TeachingBubble should be positioned.\n\n",
          "deprecated": false,
          "defaultValue": "directionalHint: DirectionalHint.bottomAutoEdge"
        },
        {
          "name": "preventDismissOnLostFocus",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true then the Coachmark will not dismiss when it loses focus\n\n",
          "deprecated": false,
          "defaultValue": "false"
        },
        {
          "name": "preventFocusOnMount",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true then focus will not be set to the Coachmark when it mounts. Useful in cases where focus on coachmark is causing other components in page to dismiss upon losing focus.\n\n",
          "deprecated": false,
          "defaultValue": "false"
        },
        {
          "name": "styles",
          "typeTokens": [
            {
              "text": "IStyleFunctionOrObject"
            },
            {
              "text": "<"
            },
            {
              "text": "ICoachmarkStyleProps",
              "hyperlinkedPage": "Coachmark",
              "pageKind": "Components"
            },
            {
              "text": ", "
            },
            {
              "text": "ICoachmarkStyles",
              "hyperlinkedPage": "Coachmark",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Call to provide customized styling that will layer on top of the variant rules\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "target",
          "typeTokens": [
            {
              "text": "HTMLElement"
            },
            {
              "text": " | string | null"
            }
          ],
          "descriptionHtml": "The target that the Coachmark should try to position itself based on.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "teachingBubbleRef",
          "typeTokens": [
            {
              "text": "ITeachingBubble",
              "hyperlinkedPage": "TeachingBubble",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Ref for TeachingBubble\n\n",
          "deprecated": true,
          "defaultValue": ""
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme",
              "hyperlinkedPage": "ITheme",
              "pageKind": "References"
            }
          ],
          "descriptionHtml": "Theme provided by higher order component.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "width",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "The width of the Coachmark.\n\n",
          "deprecated": true,
          "defaultValue": ""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "ICoachmarkStyleProps",
      "extendsTokens": [],
      "descriptionHtml": "The props needed to construct styles. \n",
      "members": [
        {
          "name": "beaconColorOne",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Beacon color one\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "beaconColorTwo",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Beacon color two\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "ClassName to provide on the root style area.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "collapsed",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Is the Coachmark collapsed. Deprecated, use `isCollapsed` instead.\n\n",
          "deprecated": true,
          "defaultValue": ""
        },
        {
          "name": "color",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Color\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "delayBeforeCoachmarkAnimation",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Delay time for the animation to start\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "entityHostHeight",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "The height measured before the component has been mounted in pixels\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "entityHostWidth",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "The width measured in pixels\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "height",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Height of the coachmark\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "isBeaconAnimating",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Is the beacon currently animating.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "isCollapsed",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Is the Coachmark collapsed\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "isMeasured",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Is the Coachmark finished measuring the dimensions of innerHostElement\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "isMeasuring",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Is the component taking measurements\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme",
              "hyperlinkedPage": "ITheme",
              "pageKind": "References"
            }
          ],
          "descriptionHtml": "Current theme.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "transformOrigin",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Transform origin for teaching bubble content\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "width",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Width of the coachmark\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "ICoachmarkStyles",
      "extendsTokens": [],
      "descriptionHtml": "Represents the stylable areas of the control. \n",
      "members": [
        {
          "name": "ariaContainer",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "The styles applied to the ARIA attribute container\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "childrenContainer",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "The layer that directly contains the TeachingBubbleContent\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "collapsed",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "The styles applied when the Coachmark has collapsed.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "entityHost",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "The layer that content/components/elements will be hosted in.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "entityInnerHost",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "The inner layer that components will be hosted in and primary purpose is scaling the layer down while the Coachmark collapsed.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "pulsingBeacon",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "The pulsing beacon that animates when the Coachmark is collapsed.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "root",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the root element in the default enabled/unchecked state.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rotateAnimationLayer",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "The layer the Rotate animation will be applied to.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "scaleAnimationLayer",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "The layer the Scale animation will be applied to.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "translateAnimationContainer",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "The layer, or div, that the translate animation will be applied to.\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    }
  ]
}
