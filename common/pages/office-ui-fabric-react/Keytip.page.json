{
  "tables": [
    {
      "kind": "interface",
      "name": "IKeytip",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": []
    },
    {
      "kind": "interface",
      "name": "IKeytipProps",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "calloutProps",
          "typeTokens": [
            {
              "text": "ICalloutProps",
              "hyperlinkedPage": "Callout",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "ICalloutProps to pass to the callout element\n",
          "deprecated": false
        },
        {
          "name": "componentRef",
          "typeTokens": [
            {
              "text": "IRefObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IKeytip",
              "hyperlinkedPage": "Keytip",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Optional callback to access the Keytip component. Use this instead of ref for accessing the public methods and properties of the component.\n",
          "deprecated": false
        },
        {
          "name": "content",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Content to put inside the keytip\n",
          "deprecated": false
        },
        {
          "name": "disabled",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "T/F if the corresponding control for this keytip is disabled\n",
          "deprecated": false
        },
        {
          "name": "hasDynamicChildren",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether or not this keytip will have children keytips that are dynamically created (DOM is generated on keytip activation) Common cases are a Pivot or Modal\n",
          "deprecated": false
        },
        {
          "name": "hasMenu",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether or not this keytip belongs to a component that has a menu Keytip mode will stay on when a menu is opened, even if the items in that menu have no keytips\n",
          "deprecated": false
        },
        {
          "name": "keySequences",
          "typeTokens": [
            {
              "text": "string[]"
            }
          ],
          "descriptionHtml": "Array of KeySequences which is the full key sequence to trigger this keytip Should not include initial 'start' key sequence\n",
          "deprecated": false
        },
        {
          "name": "offset",
          "typeTokens": [
            {
              "text": "IPoint"
            }
          ],
          "descriptionHtml": "Offset x and y for the keytip, added from the top-left corner By default the keytip will be anchored to the bottom-center of the element\n",
          "deprecated": false
        },
        {
          "name": "onExecute",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "executeTarget"
            },
            {
              "text": ": "
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": " | null, "
            },
            {
              "text": "target"
            },
            {
              "text": ": "
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": " | null) => void"
            }
          ],
          "descriptionHtml": "Function to call when this keytip is activated. 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'. 'target' is the DOM element marked with 'data-ktp-target'.\n",
          "deprecated": false
        },
        {
          "name": "onReturn",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "executeTarget"
            },
            {
              "text": ": "
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": " | null, "
            },
            {
              "text": "target"
            },
            {
              "text": ": "
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": " | null) => void"
            }
          ],
          "descriptionHtml": "Function to call when the keytip is the currentKeytip and a return sequence is pressed. 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'. 'target' is the DOM element marked with 'data-ktp-target'.\n",
          "deprecated": false
        },
        {
          "name": "overflowSetSequence",
          "typeTokens": [
            {
              "text": "string[]"
            }
          ],
          "descriptionHtml": "Full KeySequence of the overflow set button, will be set automatically if this keytip is inside an overflow\n",
          "deprecated": false
        },
        {
          "name": "styles",
          "typeTokens": [
            {
              "text": "IStyleFunctionOrObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IKeytipStyleProps",
              "hyperlinkedPage": "Keytip",
              "pageKind": "Components"
            },
            {
              "text": ", "
            },
            {
              "text": "IKeytipStyles",
              "hyperlinkedPage": "Keytip",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Optional styles for the component.\n",
          "deprecated": false
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme"
            }
          ],
          "descriptionHtml": "Theme for the component\n",
          "deprecated": false
        },
        {
          "name": "visible",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "T/F if the keytip is visible\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IKeytipStyleProps",
      "extendsTokens": [],
      "descriptionHtml": "Props to style Keytip component \n",
      "members": [
        {
          "name": "disabled",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether the keytip is disabled or not.\n",
          "deprecated": false
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme"
            }
          ],
          "descriptionHtml": "The theme for the keytip.\n",
          "deprecated": false
        },
        {
          "name": "visible",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "T/F if the keytip is visible\n",
          "deprecated": false
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IKeytipStyles",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "container",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the div container surrounding the keytip content.\n",
          "deprecated": false
        },
        {
          "name": "root",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the keytip content element.\n",
          "deprecated": false
        }
      ]
    }
  ]
}
