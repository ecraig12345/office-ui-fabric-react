{
  "tables": [
    {
      "kind": "enum",
      "name": "ButtonType",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "command",
          "descriptionHtml": "",
          "value": "4"
        },
        {
          "name": "compound",
          "descriptionHtml": "",
          "value": "3"
        },
        {
          "name": "default",
          "descriptionHtml": "",
          "value": "6"
        },
        {
          "name": "hero",
          "descriptionHtml": "",
          "value": "2"
        },
        {
          "name": "icon",
          "descriptionHtml": "",
          "value": "5"
        },
        {
          "name": "normal",
          "descriptionHtml": "",
          "value": "0"
        },
        {
          "name": "primary",
          "descriptionHtml": "",
          "value": "1"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "ElementType",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "anchor",
          "descriptionHtml": "<a> element.\n",
          "value": "1"
        },
        {
          "name": "button",
          "descriptionHtml": "<button> element.\n",
          "value": "0"
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IButton",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "dismissMenu",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "If there is a menu associated with this button and it is visible, this will dismiss the menu\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "focus",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Sets focus to the button.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "openMenu",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "shouldFocusOnContainer"
            },
            {
              "text": "?: boolean, "
            },
            {
              "text": "shouldFocusOnMount"
            },
            {
              "text": "?: boolean) => void"
            }
          ],
          "descriptionHtml": "If there is a menu associated with this button and it is visible, this will open the menu. Params are optional overrides to the ones defined in 'menuProps' to apply to just this instance of opening the menu.\n\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IButtonProps",
      "extendsTokens": [
        {
          "text": "React"
        },
        {
          "text": "."
        },
        {
          "text": "AllHTMLAttributes"
        },
        {
          "text": "<"
        },
        {
          "text": "HTMLAnchorElement"
        },
        {
          "text": " | "
        },
        {
          "text": "HTMLButtonElement"
        },
        {
          "text": " | "
        },
        {
          "text": "HTMLDivElement"
        },
        {
          "text": " | "
        },
        {
          "text": "BaseButton"
        },
        {
          "text": " | "
        },
        {
          "text": "Button"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "allowDisabledFocus",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether the button can have focus in disabled mode\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "ariaDescription",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Detailed description of the button for the benefit of screen readers.\n\nBesides the compound button, other button types will need more information provided to screen reader.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "ariaHidden",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If provided and is true it adds an 'aria-hidden' attribute instructing screen readers to ignore the element.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "ariaLabel",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "The aria label of the button for the benefit of screen readers.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "buttonType",
          "typeTokens": [
            {
              "text": "ButtonType",
              "hyperlinkedPage": "Button",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Deprecated at v1.2.3, to be removed at \\>= v2.0.0. Use specific button component instead.\n\n",
          "deprecated": true,
          "defaultValue": "ButtonType.default"
        },
        {
          "name": "checked",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether the button is checked\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "If provided, additional class name to provide on the root element.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "componentRef",
          "typeTokens": [
            {
              "text": "IRefObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IButton",
              "hyperlinkedPage": "Button",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Optional callback to access the IButton interface. Use this instead of ref for accessing the public methods and properties of the component.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "data",
          "typeTokens": [
            {
              "text": "any"
            }
          ],
          "descriptionHtml": "Any custom data the developer wishes to associate with the menu item.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "description",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the description text if applicable (for compound buttons.) Deprecated, use `secondaryText` instead.\n\n",
          "deprecated": true,
          "defaultValue": ""
        },
        {
          "name": "disabled",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether the button is disabled\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "getClassNames",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "theme"
            },
            {
              "text": ": "
            },
            {
              "text": "ITheme",
              "hyperlinkedPage": "ITheme",
              "pageKind": "References"
            },
            {
              "text": ", "
            },
            {
              "text": "className"
            },
            {
              "text": ": string, "
            },
            {
              "text": "variantClassName"
            },
            {
              "text": ": string, "
            },
            {
              "text": "iconClassName"
            },
            {
              "text": ": string | undefined, "
            },
            {
              "text": "menuIconClassName"
            },
            {
              "text": ": string | undefined, "
            },
            {
              "text": "disabled"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "checked"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "expanded"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "isSplit"
            },
            {
              "text": ": boolean | undefined, "
            },
            {
              "text": "allowDisabledFocus"
            },
            {
              "text": ": boolean) => "
            },
            {
              "text": "IButtonClassNames"
            }
          ],
          "descriptionHtml": "Method to provide the classnames to style a button. The default value for this prop is the getClassnames func defined in BaseButton.classnames.\n\n",
          "deprecated": false,
          "defaultValue": "getBaseButtonClassNames"
        },
        {
          "name": "getSplitButtonClassNames",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "disabled"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "expanded"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "checked"
            },
            {
              "text": ": boolean, "
            },
            {
              "text": "allowDisabledFocus"
            },
            {
              "text": ": boolean) => "
            },
            {
              "text": "ISplitButtonClassNames"
            }
          ],
          "descriptionHtml": "Method to provide the classnames to style a button. The default value for this prop is the getClassnames func defined in BaseButton.classnames.\n\n",
          "deprecated": false,
          "defaultValue": "getBaseSplitButtonClassNames"
        },
        {
          "name": "href",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "If provided, this component will be rendered as an anchor.\n\n",
          "deprecated": false,
          "defaultValue": "ElementType.anchor"
        },
        {
          "name": "iconProps",
          "typeTokens": [
            {
              "text": "IIconProps",
              "hyperlinkedPage": "Icon",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "The props for the icon shown in the button.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "keytipProps",
          "typeTokens": [
            {
              "text": "IKeytipProps",
              "hyperlinkedPage": "Keytip",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Optional keytip for this button\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "menuAs",
          "typeTokens": [
            {
              "text": "IComponentAs"
            },
            {
              "text": "<"
            },
            {
              "text": "IContextualMenuProps",
              "hyperlinkedPage": "ContextualMenu",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Render a custom menu in place of the normal one.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "menuIconProps",
          "typeTokens": [
            {
              "text": "IIconProps",
              "hyperlinkedPage": "Icon",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "The props for the icon shown when providing a menu dropdown.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "menuProps",
          "typeTokens": [
            {
              "text": "IContextualMenuProps",
              "hyperlinkedPage": "ContextualMenu",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Props for button menu. Providing this will default to showing the menu icon. See menuIconProps for overriding how the default icon looks. Providing this in addition of onClick and setting the split property to true will render a SplitButton.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "menuTriggerKeyCode",
          "typeTokens": [
            {
              "text": "KeyCodes"
            },
            {
              "text": " | null"
            }
          ],
          "descriptionHtml": "Provides a custom KeyCode that can be used to open the button menu. The default KeyCode is the down arrow. A value of null can be provided to disable the key codes for opening the button menu.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onAfterMenuDismiss",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Callback that runs after Button's contextualmenu was closed (removed from the DOM)\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onMenuClick",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "ev"
            },
            {
              "text": "?: "
            },
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "MouseEvent"
            },
            {
              "text": "<"
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": "> | "
            },
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "KeyboardEvent"
            },
            {
              "text": "<"
            },
            {
              "text": "HTMLElement"
            },
            {
              "text": ">, "
            },
            {
              "text": "button"
            },
            {
              "text": "?: "
            },
            {
              "text": "IButtonProps",
              "hyperlinkedPage": "Button",
              "pageKind": "Components"
            },
            {
              "text": ") => void"
            }
          ],
          "descriptionHtml": "Optional callback when menu is clicked.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onRenderAriaDescription",
          "typeTokens": [
            {
              "text": "IRenderFunction"
            },
            {
              "text": "<"
            },
            {
              "text": "IButtonProps",
              "hyperlinkedPage": "Button",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Custom render function for the aria description element.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onRenderChildren",
          "typeTokens": [
            {
              "text": "IRenderFunction"
            },
            {
              "text": "<"
            },
            {
              "text": "IButtonProps",
              "hyperlinkedPage": "Button",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Custom render function for rendering the button children.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onRenderDescription",
          "typeTokens": [
            {
              "text": "IRenderFunction"
            },
            {
              "text": "<"
            },
            {
              "text": "IButtonProps",
              "hyperlinkedPage": "Button",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Custom render function for the desciption text.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onRenderIcon",
          "typeTokens": [
            {
              "text": "IRenderFunction"
            },
            {
              "text": "<"
            },
            {
              "text": "IButtonProps",
              "hyperlinkedPage": "Button",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Custom render function for the icon\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onRenderMenu",
          "typeTokens": [
            {
              "text": "IRenderFunction"
            },
            {
              "text": "<"
            },
            {
              "text": "IContextualMenuProps",
              "hyperlinkedPage": "ContextualMenu",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Deprecated at v6.3.2, to be removed at \\>= v7.0.0. Use `menuAs` instead.\n\n",
          "deprecated": true,
          "defaultValue": ""
        },
        {
          "name": "onRenderMenuIcon",
          "typeTokens": [
            {
              "text": "IRenderFunction"
            },
            {
              "text": "<"
            },
            {
              "text": "IButtonProps",
              "hyperlinkedPage": "Button",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Custom render function for button menu icon\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onRenderText",
          "typeTokens": [
            {
              "text": "IRenderFunction"
            },
            {
              "text": "<"
            },
            {
              "text": "IButtonProps",
              "hyperlinkedPage": "Button",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Custom render function for the label text.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "persistMenu",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Menu will not be created or destroyed when opened or closed, instead it will be hidden. This will improve perf of the menu opening but could potentially impact overall perf by having more elemnts in the dom. Should only be used when perf is important. Note: This may increase the amount of time it takes for the button itself to mount.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "primary",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Changes the visual presentation of the button to be emphasized (if defined)\n\n",
          "deprecated": false,
          "defaultValue": "false"
        },
        {
          "name": "primaryDisabled",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If set to true and if this is a splitButton (split == true) then the primary action of a split button is disabled.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rootProps",
          "typeTokens": [
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "ButtonHTMLAttributes"
            },
            {
              "text": "<"
            },
            {
              "text": "HTMLButtonElement"
            },
            {
              "text": "> | "
            },
            {
              "text": "React"
            },
            {
              "text": "."
            },
            {
              "text": "AnchorHTMLAttributes"
            },
            {
              "text": "<"
            },
            {
              "text": "HTMLAnchorElement"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Deprecated at v0.56.2, to be removed at \\>= v1.0.0. Just pass in button props instead. they will be mixed into the button/anchor element rendered by the component.\n\n",
          "deprecated": true,
          "defaultValue": ""
        },
        {
          "name": "secondaryText",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Description of the action this button takes. Only used for compound buttons\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "split",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If set to true, and if menuProps and onClick are provided, the button will render as a SplitButton. Defaults to false.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonAriaLabel",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Accessible label for the dropdown chevron button if this button is split.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "styles",
          "typeTokens": [
            {
              "text": "IButtonStyles",
              "hyperlinkedPage": "Button",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Custom styling for individual elements within the button DOM.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "text",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Text to render button label. If text is supplied, it will override any string in button children. Other children components will be passed through after the text.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme",
              "hyperlinkedPage": "ITheme",
              "pageKind": "References"
            }
          ],
          "descriptionHtml": "Theme provided by HOC.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "toggle",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether button is a toggle button with distinct on and off states. This should be true for buttons that permanently change state when a press event finishes, such as a volume mute button.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "toggled",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Any custom data the developer wishes to associate with the menu item. Deprecated, use `checked` if setting state.\n\n",
          "deprecated": true,
          "defaultValue": ""
        },
        {
          "name": "uniqueId",
          "typeTokens": [
            {
              "text": "string | number"
            }
          ],
          "descriptionHtml": "Unique id to identify the item. Typically a duplicate of key value.\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IButtonStyles",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "description",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the description text if applicable (for compound buttons.)\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "descriptionChecked",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the description text when the button is checked.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "descriptionDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the description text when the button is disabled.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "descriptionHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the description text when the button is hovered.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "descriptionPressed",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the description text when the button is pressed.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "flexContainer",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the flexbox container within the root element.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "icon",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the icon on the near side of the label.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "iconChecked",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the icon when the button is checked.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "iconDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the icon when the button is disabled.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "iconExpanded",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the icon on the near side of the label when expanded.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "iconExpandedHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the icon on the near side of the label when expanded and hovered.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "iconHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the icon on the near side of the label on hover.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "iconPressed",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the icon on the near side of the label when pressed.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "label",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the text content of the button.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "labelChecked",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the text content when the button is checked.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "labelDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the text content when the button is disabled.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "labelHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the text content when the button is hovered.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "menuIcon",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the menu chevron.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "menuIconChecked",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the menu chevron when the button is checked.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "menuIconDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the menu chevron when the button is disabled.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "menuIconExpanded",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the menu chevron when expanded.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "menuIconExpandedHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the menu chevron when expanded and hovered.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "menuIconHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the menu chevron on hover.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "menuIconPressed",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the menu chevron when pressed.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "root",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the root element in the default enabled, non-toggled state.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rootChecked",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the root element in a checked state, layered on top of the root style.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rootCheckedDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override applied to the root on hover in a checked, disabled state\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rootCheckedHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override applied to the root on hover in a checked, enabled state\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rootCheckedPressed",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override applied to the root on pressed in a checked, enabled state\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rootDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the root element in a disabled state, layered on top of the root style.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rootExpanded",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override applied to the root on when menu is expanded in the default, enabled, non-toggled state.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rootExpandedHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override applied to the root on hover in a expanded state on hover\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rootFocused",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override applied to the root on focus in the default, enabled, non-toggled state.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rootHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override applied to the root on hover in the default, enabled, non-toggled state.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "rootPressed",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override applied to the root on pressed in the default, enabled, non-toggled state.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "screenReaderText",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the screen reader text.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "secondaryText",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the description text if applicable (for compound buttons.)\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonContainer",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the container div around a SplitButton element\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonContainerChecked",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for container div around a SplitButton element when the button is checked.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonContainerCheckedHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for container div around a SplitButton element when the button is checked and hovered.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonContainerDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the container div around a SplitButton element in a disabled state\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonContainerFocused",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for container div around a SplitButton element when the button is focused.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonContainerHovered",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for container div around a SplitButton element when the button is hovered.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonDivider",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the divider element that appears between the button and menu button for a split button.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonFlexContainer",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the SplitButton FlexContainer.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonMenuButton",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the SplitButton menu button\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonMenuButtonChecked",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the SplitButton menu button element in a checked state\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonMenuButtonDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the SplitButton menu button element in a disabled state.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonMenuButtonExpanded",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the SplitButton menu button element in an expanded state\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonMenuIcon",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the SplitButton menu icon element\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "splitButtonMenuIconDisabled",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style override for the SplitButton menu icon element in a disabled state\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "textContainer",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the text container within the flexbox container element (and contains the text and description).\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    }
  ]
}
