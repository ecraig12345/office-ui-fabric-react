{
  "tables": [
    {
      "kind": "interface",
      "name": "IPositioningContainer",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": []
    },
    {
      "kind": "interface",
      "name": "IPositioningContainerProps",
      "extendsTokens": [
        {
          "text": "IBaseProps",
          "hyperlinkedPage": "IBaseProps",
          "pageKind": "References"
        },
        {
          "text": "<"
        },
        {
          "text": "IPositioningContainer",
          "hyperlinkedPage": "PositioningContainer",
          "pageKind": "Components"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "ariaDescribedBy",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Defines the element id referencing the element containing the description for the positioningContainer.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "ariaLabel",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Accessible label text for positioningContainer.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "ariaLabelledBy",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Defines the element id referencing the element containing label text for positioningContainer.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "backgroundColor",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "The background color of the positioningContainer in hex format ie. #ffffff.\n\n",
          "deprecated": false,
          "defaultValue": "$ms-color-white"
        },
        {
          "name": "bounds",
          "typeTokens": [
            {
              "text": "IRectangle",
              "hyperlinkedPage": "IRectangle",
              "pageKind": "References"
            }
          ],
          "descriptionHtml": "The bounding rectangle for which the contextual menu can appear in.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "CSS class to apply to the positioningContainer.\n\n",
          "deprecated": false,
          "defaultValue": "null"
        },
        {
          "name": "componentRef",
          "typeTokens": [
            {
              "text": "IRefObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IPositioningContainer",
              "hyperlinkedPage": "PositioningContainer",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "All props for your component are to be defined here.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "coverTarget",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true the position returned will have the menu element cover the target. If false then it will position next to the target;\n\n",
          "deprecated": false,
          "defaultValue": "false"
        },
        {
          "name": "directionalHint",
          "typeTokens": [
            {
              "text": "DirectionalHint"
            }
          ],
          "descriptionHtml": "How the element should be positioned\n\n",
          "deprecated": false,
          "defaultValue": "DirectionalHint.BottomAutoEdge"
        },
        {
          "name": "directionalHintFixed",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true the position will not change sides in an attempt to fit the positioningContainer within bounds. It will still attempt to align it to whatever bounds are given.\n\n",
          "deprecated": false,
          "defaultValue": "false"
        },
        {
          "name": "directionalHintForRTL",
          "typeTokens": [
            {
              "text": "DirectionalHint"
            }
          ],
          "descriptionHtml": "How the element should be positioned in RTL layouts. If not specified, a mirror of `directionalHint` will be used instead\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "doNotLayer",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true do not render on a new layer. If false render on a new layer.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "finalHeight",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Specify the final height of the content. To be used when expanding the content dynamically so that positioningContainer can adjust its position.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "minPagePadding",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "The minimum distance the positioningContainer will be away from the edge of the screen.\n\n",
          "deprecated": false,
          "defaultValue": "8"
        },
        {
          "name": "offsetFromTarget",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "The gap between the positioningContainer and the target\n\n",
          "deprecated": false,
          "defaultValue": "0"
        },
        {
          "name": "onDismiss",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "ev"
            },
            {
              "text": "?: any) => void"
            }
          ],
          "descriptionHtml": "Callback when the positioningContainer tries to close.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onLayerMounted",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Optional callback when the layer content has mounted.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onPositioned",
          "typeTokens": [
            {
              "text": "("
            },
            {
              "text": "positions"
            },
            {
              "text": "?: "
            },
            {
              "text": "IPositionedData"
            },
            {
              "text": ") => void"
            }
          ],
          "descriptionHtml": "Optional callback that is called once the positioningContainer has been correctly positioned.\n\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "positioningContainerMaxHeight",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Set max height of positioningContainer When not set the positioningContainer will expand with contents up to the bottom of the screen\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "positioningContainerWidth",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Custom width for positioningContainer including borders. If value is 0, no width is applied.\n\n",
          "deprecated": false,
          "defaultValue": "0"
        },
        {
          "name": "preventDismissOnScroll",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true then the onClose will not not dismiss on scroll\n\n",
          "deprecated": false,
          "defaultValue": "false"
        },
        {
          "name": "role",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Aria role assigned to the positioningContainer (Eg. dialog, alertdialog).\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "setInitialFocus",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true then the positioningContainer will attempt to focus the first focusable element that it contains. If it doesn't find an element, no focus will be set and the method will return false. This means that it's the contents responsibility to either set focus or have focusable items.\n\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "target",
          "typeTokens": [
            {
              "text": "HTMLElement"
            },
            {
              "text": " | string | "
            },
            {
              "text": "MouseEvent"
            },
            {
              "text": " | "
            },
            {
              "text": "IPoint",
              "hyperlinkedPage": "IPoint",
              "pageKind": "References"
            },
            {
              "text": " | null"
            }
          ],
          "descriptionHtml": "The target that the positioningContainer should try to position itself based on. It can be either an HTMLElement a querySelector string of a valid HTMLElement or a MouseEvent. If MouseEvent is given then the origin point of the event will be used.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "targetPoint",
          "typeTokens": [
            {
              "text": "IPoint",
              "hyperlinkedPage": "IPoint",
              "pageKind": "References"
            }
          ],
          "descriptionHtml": "Point used to position the positioningContainer. Deprecated, use `target` instead.\n\n",
          "deprecated": true,
          "defaultValue": ""
        },
        {
          "name": "useTargetPoint",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true use a point rather than rectangle to position the positioningContainer. For example it can be used to position based on a click.\n\n",
          "deprecated": true,
          "defaultValue": ""
        }
      ]
    }
  ]
}
