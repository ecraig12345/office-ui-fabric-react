{
  "tables": [
    {
      "kind": "enum",
      "name": "ExpandingCardMode",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "compact",
          "descriptionHtml": "To have top compact card only\n",
          "value": "0"
        },
        {
          "name": "expanded",
          "descriptionHtml": "To have both top compact and bottom expanded card\n",
          "value": "1"
        }
      ]
    },
    {
      "kind": "enum",
      "name": "HoverCardType",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "expanding",
          "descriptionHtml": "File card consisting of two parts: compact and expanded. Has some default sizes if not specified.\n",
          "value": "\"ExpandingCard\""
        },
        {
          "name": "plain",
          "descriptionHtml": "Plain card consisting of one part responsive to the size of content.\n",
          "value": "\"PlainCard\""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IExpandingCard",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": []
    },
    {
      "kind": "interface",
      "name": "IExpandingCardProps",
      "extendsTokens": [
        {
          "text": "IBaseCardProps"
        },
        {
          "text": "<"
        },
        {
          "text": "IExpandingCard",
          "hyperlinkedPage": "HoverCard",
          "pageKind": "Components"
        },
        {
          "text": ", "
        },
        {
          "text": "IExpandingCardStyles",
          "hyperlinkedPage": "HoverCard",
          "pageKind": "Components"
        },
        {
          "text": ", "
        },
        {
          "text": "IExpandingCardStyleProps",
          "hyperlinkedPage": "HoverCard",
          "pageKind": "Components"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "ExpandingCard component props. \n",
      "members": [
        {
          "name": "compactCardHeight",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Height of compact card\n\n",
          "deprecated": false,
          "defaultValue": "156"
        },
        {
          "name": "expandedCardHeight",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Height of expanded card\n\n",
          "deprecated": false,
          "defaultValue": "384"
        },
        {
          "name": "mode",
          "typeTokens": [
            {
              "text": "ExpandingCardMode",
              "hyperlinkedPage": "HoverCard",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Use to open the card in expanded format and not wait for the delay\n\n",
          "deprecated": false,
          "defaultValue": "ExpandingCardMode.compact"
        },
        {
          "name": "onRenderCompactCard",
          "typeTokens": [
            {
              "text": "IRenderFunction"
            },
            {
              "text": "<any>"
            }
          ],
          "descriptionHtml": "Render function to populate compact content area\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onRenderExpandedCard",
          "typeTokens": [
            {
              "text": "IRenderFunction"
            },
            {
              "text": "<any>"
            }
          ],
          "descriptionHtml": "Render function to populate expanded content area\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IExpandingCardStyleProps",
      "extendsTokens": [
        {
          "text": "IBaseCardStyleProps"
        },
        {
          "text": " "
        }
      ],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "compactCardHeight",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Height of the compact section of the card.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "expandedCardFirstFrameRendered",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Boolean flag that expanded card is in Expanded.mode === expanded && first frame was rendered.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "expandedCardHeight",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Height of the expanded section of the card.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "needsScroll",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether the content of the expanded card overflows vertically.\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IExpandingCardStyles",
      "extendsTokens": [
        {
          "text": "IBaseCardStyles"
        },
        {
          "text": " "
        }
      ],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "compactCard",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the main card element.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "expandedCard",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Base Style for the expanded card content.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "expandedCardScroll",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the expanded card scroll content.\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IHoverCard",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": []
    },
    {
      "kind": "interface",
      "name": "IHoverCardProps",
      "extendsTokens": [
        {
          "text": "React"
        },
        {
          "text": "."
        },
        {
          "text": "HTMLAttributes"
        },
        {
          "text": "<"
        },
        {
          "text": "HTMLDivElement"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "HoverCard component props. \n",
      "members": [
        {
          "name": "cardDismissDelay",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Length of card dismiss delay. A min number is necessary for pointer to hop between target and card\n\n",
          "deprecated": false,
          "defaultValue": "100"
        },
        {
          "name": "cardOpenDelay",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Length of compact card delay\n\n",
          "deprecated": false,
          "defaultValue": "500"
        },
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Additional CSS class(es) to apply to the HoverCard root element.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "componentRef",
          "typeTokens": [
            {
              "text": "IRefObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IHoverCard",
              "hyperlinkedPage": "HoverCard",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Optional callback to access the IHoverCardHost interface. Use this instead of ref for accessing the public methods and properties of the component.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "expandedCardOpenDelay",
          "typeTokens": [
            {
              "text": "number"
            }
          ],
          "descriptionHtml": "Time in ms when expanded card should open after compact card\n\n",
          "deprecated": false,
          "defaultValue": "1500"
        },
        {
          "name": "expandingCardProps",
          "typeTokens": [
            {
              "text": "IExpandingCardProps",
              "hyperlinkedPage": "HoverCard",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Additional ExpandingCard props to pass through HoverCard like renderers, target. gapSpace etc. Used along with 'type' prop set to HoverCardType.expanding. Reference detail properties in ICardProps and IExpandingCardProps.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "instantOpenOnClick",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Enables instant open of the full card upon click\n\n",
          "deprecated": false,
          "defaultValue": "false"
        },
        {
          "name": "onCardExpand",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Callback when visible card is expanded.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onCardHide",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Callback when card hides\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "onCardVisible",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Callback when card becomes visible\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "openHotKey",
          "typeTokens": [
            {
              "text": "KeyCodes"
            }
          ],
          "descriptionHtml": "HotKey used for opening the HoverCard when tabbed to target.\n\n",
          "deprecated": false,
          "defaultValue": "'KeyCodes.c'"
        },
        {
          "name": "plainCardProps",
          "typeTokens": [
            {
              "text": "IPlainCardProps",
              "hyperlinkedPage": "HoverCard",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Additional PlainCard props to pass through HoverCard like renderers, target, gapSpace etc. Used along with 'type' prop set to HoverCardType.plain. See for more details ICardProps and IPlainCardProps interfaces.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "setAriaDescribedBy",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Whether or not to mark the container as described by the hover card. If not specified, the caller should mark as element as described by the hover card id.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "setInitialFocus",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Set to true to set focus on the first focusable element in the card. Works in pair with the 'trapFocus' prop.\n\n",
          "deprecated": false,
          "defaultValue": "false"
        },
        {
          "name": "shouldBlockHoverCard",
          "typeTokens": [
            {
              "text": "() => void"
            }
          ],
          "descriptionHtml": "Should block hover card or not\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "sticky",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "If true disables Card dismiss upon mouse leave, so that card sticks around.\n\n",
          "deprecated": false,
          "defaultValue": "false"
        },
        {
          "name": "styles",
          "typeTokens": [
            {
              "text": "IStyleFunctionOrObject"
            },
            {
              "text": "<"
            },
            {
              "text": "IHoverCardStyleProps",
              "hyperlinkedPage": "HoverCard",
              "pageKind": "Components"
            },
            {
              "text": ", "
            },
            {
              "text": "IHoverCardStyles",
              "hyperlinkedPage": "HoverCard",
              "pageKind": "Components"
            },
            {
              "text": ">"
            }
          ],
          "descriptionHtml": "Custom styles for this component\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "target",
          "typeTokens": [
            {
              "text": "HTMLElement"
            },
            {
              "text": " | string"
            }
          ],
          "descriptionHtml": "Optional target element to tag hover card on. If not provided and using HoverCard as a wrapper, don't set 'data-is-focusable=true' attribute to the root of the wrapped child. When no target given, HoverCard will use it's root as a target and become the focusable element with a focus listener attached to it.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme",
              "hyperlinkedPage": "ITheme",
              "pageKind": "References"
            }
          ],
          "descriptionHtml": "Theme provided by higher order component.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "trapFocus",
          "typeTokens": [
            {
              "text": "boolean"
            }
          ],
          "descriptionHtml": "Set to true if you want to render the content of the HoverCard in a FocusTrapZone for accessibility reasons. Optionally 'setInitialFocus' prop can be set to true to move focus inside the FocusTrapZone.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "type",
          "typeTokens": [
            {
              "text": "HoverCardType",
              "hyperlinkedPage": "HoverCard",
              "pageKind": "Components"
            }
          ],
          "descriptionHtml": "Type of the hover card to render.\n\n",
          "deprecated": false,
          "defaultValue": "HoverCardType.expanding"
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IHoverCardStyleProps",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "className",
          "typeTokens": [
            {
              "text": "string"
            }
          ],
          "descriptionHtml": "Optional className(s) for the host div of HoverCard.\n",
          "deprecated": false,
          "defaultValue": ""
        },
        {
          "name": "theme",
          "typeTokens": [
            {
              "text": "ITheme",
              "hyperlinkedPage": "ITheme",
              "pageKind": "References"
            }
          ],
          "descriptionHtml": "Theme provided by High-Order Component.\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IHoverCardStyles",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "host",
          "typeTokens": [
            {
              "text": "IStyle"
            }
          ],
          "descriptionHtml": "Style for the host element in the default enabled, non-toggled state.\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IPlainCard",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": []
    },
    {
      "kind": "interface",
      "name": "IPlainCardProps",
      "extendsTokens": [
        {
          "text": "IBaseCardProps"
        },
        {
          "text": "<"
        },
        {
          "text": "IPlainCard",
          "hyperlinkedPage": "HoverCard",
          "pageKind": "Components"
        },
        {
          "text": ", "
        },
        {
          "text": "IPlainCardStyles",
          "hyperlinkedPage": "HoverCard",
          "pageKind": "Components"
        },
        {
          "text": ", "
        },
        {
          "text": "IPlainCardStyleProps",
          "hyperlinkedPage": "HoverCard",
          "pageKind": "Components"
        },
        {
          "text": "> "
        }
      ],
      "descriptionHtml": "PlainCard component props. \n",
      "members": [
        {
          "name": "onRenderPlainCard",
          "typeTokens": [
            {
              "text": "IRenderFunction"
            },
            {
              "text": "<any>"
            }
          ],
          "descriptionHtml": "Render function to populate compact content area\n",
          "deprecated": false,
          "defaultValue": ""
        }
      ]
    },
    {
      "kind": "interface",
      "name": "IPlainCardStyleProps",
      "extendsTokens": [
        {
          "text": "IBaseCardStyleProps"
        },
        {
          "text": " "
        }
      ],
      "descriptionHtml": "\n",
      "members": []
    },
    {
      "kind": "interface",
      "name": "IPlainCardStyles",
      "extendsTokens": [
        {
          "text": "IBaseCardStyles"
        },
        {
          "text": " "
        }
      ],
      "descriptionHtml": "\n",
      "members": []
    },
    {
      "kind": "enum",
      "name": "OpenCardMode",
      "extendsTokens": [],
      "descriptionHtml": "\n",
      "members": [
        {
          "name": "hotKey",
          "descriptionHtml": "Open card by hot key\n",
          "value": "1"
        },
        {
          "name": "hover",
          "descriptionHtml": "Open card by hover\n",
          "value": "0"
        }
      ]
    }
  ]
}
