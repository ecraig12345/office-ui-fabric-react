{
  "tables": [
    {
      "kind": "class",
      "name": "EventGroup",
      "extendsTokens": [],
      "descriptionHtml": "An instance of EventGroup allows anything with a handle to it to trigger events on it. If the target is an HTMLElement, the event will be attached to the element and can be triggered as usual (like clicking for onclick). The event can be triggered by calling EventGroup.raise() here. If the target is an HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets handled here in EventGroup, and the handler is called in the context of the parent (which is passed in in the constructor).\n\n\n\n\n",
      "members": [
        {
          "name": "declare",
          "typeTokens": [
            {
              "text": "declare"
            },
            {
              "text": "("
            },
            {
              "text": "event"
            },
            {
              "text": ": "
            },
            {
              "text": "string | string[]"
            },
            {
              "text": "): "
            },
            {
              "text": "void"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "Declare an event as being supported by this instance of EventGroup.\n",
          "deprecated": false,
          "kind": "Method"
        },
        {
          "name": "dispose",
          "typeTokens": [
            {
              "text": "dispose"
            },
            {
              "text": "(): "
            },
            {
              "text": "void"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "",
          "deprecated": false,
          "kind": "Method"
        },
        {
          "name": "isDeclared",
          "typeTokens": [
            {
              "text": "static "
            },
            {
              "text": "isDeclared"
            },
            {
              "text": "("
            },
            {
              "text": "target"
            },
            {
              "text": ": "
            },
            {
              "text": "any"
            },
            {
              "text": ", "
            },
            {
              "text": "eventName"
            },
            {
              "text": ": "
            },
            {
              "text": "string"
            },
            {
              "text": "): "
            },
            {
              "text": "boolean"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "Check to see if the target has declared support of the given event.\n",
          "deprecated": false,
          "kind": "Method"
        },
        {
          "name": "isObserved",
          "typeTokens": [
            {
              "text": "static "
            },
            {
              "text": "isObserved"
            },
            {
              "text": "("
            },
            {
              "text": "target"
            },
            {
              "text": ": "
            },
            {
              "text": "any"
            },
            {
              "text": ", "
            },
            {
              "text": "eventName"
            },
            {
              "text": ": "
            },
            {
              "text": "string"
            },
            {
              "text": "): "
            },
            {
              "text": "boolean"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "",
          "deprecated": false,
          "kind": "Method"
        },
        {
          "name": "off",
          "typeTokens": [
            {
              "text": "off"
            },
            {
              "text": "("
            },
            {
              "text": "target"
            },
            {
              "text": "?: "
            },
            {
              "text": "any"
            },
            {
              "text": ", "
            },
            {
              "text": "eventName"
            },
            {
              "text": "?: "
            },
            {
              "text": "string"
            },
            {
              "text": ", "
            },
            {
              "text": "callback"
            },
            {
              "text": "?: "
            },
            {
              "text": "("
            },
            {
              "text": "args"
            },
            {
              "text": "?: any) => void"
            },
            {
              "text": ", "
            },
            {
              "text": "options"
            },
            {
              "text": "?: "
            },
            {
              "text": "boolean | "
            },
            {
              "text": "AddEventListenerOptions"
            },
            {
              "text": "): "
            },
            {
              "text": "void"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "",
          "deprecated": false,
          "kind": "Method"
        },
        {
          "name": "on",
          "typeTokens": [
            {
              "text": "on"
            },
            {
              "text": "("
            },
            {
              "text": "target"
            },
            {
              "text": ": "
            },
            {
              "text": "any"
            },
            {
              "text": ", "
            },
            {
              "text": "eventName"
            },
            {
              "text": ": "
            },
            {
              "text": "string"
            },
            {
              "text": ", "
            },
            {
              "text": "callback"
            },
            {
              "text": ": "
            },
            {
              "text": "("
            },
            {
              "text": "args"
            },
            {
              "text": "?: any) => void"
            },
            {
              "text": ", "
            },
            {
              "text": "options"
            },
            {
              "text": "?: "
            },
            {
              "text": "boolean | "
            },
            {
              "text": "AddEventListenerOptions"
            },
            {
              "text": "): "
            },
            {
              "text": "void"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "On the target, attach an event whose handler will be called in the context of the parent of this instance of EventGroup.\n",
          "deprecated": false,
          "kind": "Method"
        },
        {
          "name": "onAll",
          "typeTokens": [
            {
              "text": "onAll"
            },
            {
              "text": "("
            },
            {
              "text": "target"
            },
            {
              "text": ": "
            },
            {
              "text": "any"
            },
            {
              "text": ", "
            },
            {
              "text": "events"
            },
            {
              "text": ": "
            },
            {
              "text": "{\n        ["
            },
            {
              "text": "key"
            },
            {
              "text": ": string]: ("
            },
            {
              "text": "args"
            },
            {
              "text": "?: any) => void;\n    }"
            },
            {
              "text": ", "
            },
            {
              "text": "useCapture"
            },
            {
              "text": "?: "
            },
            {
              "text": "boolean"
            },
            {
              "text": "): "
            },
            {
              "text": "void"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "On the target, attach a set of events, where the events object is a name to function mapping.\n",
          "deprecated": false,
          "kind": "Method"
        },
        {
          "name": "raise",
          "typeTokens": [
            {
              "text": "raise"
            },
            {
              "text": "("
            },
            {
              "text": "eventName"
            },
            {
              "text": ": "
            },
            {
              "text": "string"
            },
            {
              "text": ", "
            },
            {
              "text": "eventArgs"
            },
            {
              "text": "?: "
            },
            {
              "text": "any"
            },
            {
              "text": ", "
            },
            {
              "text": "bubbleEvent"
            },
            {
              "text": "?: "
            },
            {
              "text": "boolean"
            },
            {
              "text": "): "
            },
            {
              "text": "boolean | undefined"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "Trigger the given event in the context of this instance of EventGroup.\n",
          "deprecated": false,
          "kind": "Method"
        },
        {
          "name": "raise",
          "typeTokens": [
            {
              "text": "static "
            },
            {
              "text": "raise"
            },
            {
              "text": "("
            },
            {
              "text": "target"
            },
            {
              "text": ": "
            },
            {
              "text": "any"
            },
            {
              "text": ", "
            },
            {
              "text": "eventName"
            },
            {
              "text": ": "
            },
            {
              "text": "string"
            },
            {
              "text": ", "
            },
            {
              "text": "eventArgs"
            },
            {
              "text": "?: "
            },
            {
              "text": "any"
            },
            {
              "text": ", "
            },
            {
              "text": "bubbleEvent"
            },
            {
              "text": "?: "
            },
            {
              "text": "boolean"
            },
            {
              "text": "): "
            },
            {
              "text": "boolean | undefined"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "For IE8, bubbleEvent is ignored here and must be dealt with by the handler. Events raised here by default have bubbling set to false and cancelable set to true. This applies also to built-in events being raised manually here on HTMLElements, which may lead to unexpected behavior if it differs from the defaults.\n",
          "deprecated": false,
          "kind": "Method"
        },
        {
          "name": "stopPropagation",
          "typeTokens": [
            {
              "text": "static "
            },
            {
              "text": "stopPropagation"
            },
            {
              "text": "("
            },
            {
              "text": "event"
            },
            {
              "text": ": "
            },
            {
              "text": "any"
            },
            {
              "text": "): "
            },
            {
              "text": "void"
            },
            {
              "text": ";"
            }
          ],
          "descriptionHtml": "",
          "deprecated": false,
          "kind": "Method"
        }
      ]
    }
  ]
}
